plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.app'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.itextpdf:itextpdf:5.5.13.3'
	implementation 'org.apache.pdfbox:pdfbox:3.0.0'

    testImplementation 'org.springframework.security:spring-security-test'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            includes = ['com.app.kantinerado.services.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}

task showCoverage(type: Exec, dependsOn: jacocoTestReport) {
    commandLine 'open', "${buildDir}/reports/jacoco/test/html/index.html"
}

task waitForTestDatabase {
    doLast {
        def maxRetries = 10
        def retryCount = 0
        def healthStatus = ''
        
        while (retryCount < maxRetries && healthStatus != 'healthy') {
            def output = new ByteArrayOutputStream()
            exec {
                commandLine 'docker', 'inspect', '--format', '{{.State.Health.Status}}', 'mysql-test'
                standardOutput = output
            }
            healthStatus = output.toString().trim()

            if (healthStatus != 'healthy') {
                println "Current health status: ${healthStatus}. Waiting for the test database to become healthy..."
                sleep(5000) // wait for 5 seconds before retrying
                retryCount++
            }
        }

        if (healthStatus == 'healthy') {
            println "Test database is healthy!"
        } else {
            throw new GradleException("Test database did not become healthy within the timeout period.")
        }
    }
}

task startTestDatabase {
    doLast {
        try {
            exec {
                commandLine 'docker-compose', '-f', 'docker-compose-test.yaml', 'up', '-d'
                ignoreExitValue true
            }
        } catch (Exception e) {
            exec {
                commandLine 'docker', 'compose', '-f', 'docker-compose-test.yaml', 'up', '-d'
                ignoreExitValue true
            }
        }
    }
    finalizedBy waitForTestDatabase 
}

task stopTestDatabase {
    doLast {
        try {
            exec {
                commandLine 'docker-compose', '-f', 'docker-compose-test.yaml', 'down'
                ignoreExitValue true
            }
        } catch (Exception e) {
            exec {
                commandLine 'docker', 'compose', '-f', 'docker-compose-test.yaml', 'down'
                ignoreExitValue true
            }
        }
    }
}

test {
    useJUnitPlatform()
    dependsOn startTestDatabase
    finalizedBy stopTestDatabase, jacocoTestReport
    maxParallelForks = 4
}

check.dependsOn jacocoTestCoverageVerification